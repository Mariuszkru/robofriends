{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0SAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEhBW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCqBPC,G,wLAGEC,KAAKP,MAAMQ,oB,+BAGL,IAAD,EACkDD,KAAKP,MAArDS,EADF,EACEA,YAAaC,EADf,EACeA,eAAetB,EAD9B,EAC8BA,OAAOuB,EADrC,EACqCA,UACpCC,EAAiBxB,EAAOyB,QAAO,SAAAC,GACjC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAASP,EAAYM,kBAEzD,OAAOJ,EACH,uCAEI,yBAAK3B,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAce,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAAQwB,U,GAlBxBK,cAyBHC,eAxCS,SAAAC,GACpB,MAAO,CACHV,YAAaU,EAAMC,aAAaX,YAChCrB,OAAQ+B,EAAME,cAAcjC,OAC5BuB,UAAUQ,EAAME,cAAcV,UAC9BW,MAAMH,EAAME,cAAcC,UAGP,SAAAC,GACvB,MAAO,CACHb,eAAgB,SAACc,GAAD,OAAWD,ECnBM,CACrC3B,KCHgC,sBDIhC6B,QDiBuDD,EAAME,OAAOC,SAChEnB,gBAAiB,kBAAKe,GCfK,SAACA,GAChCA,EAAS,CAAC3B,KCNyB,2BDOnCgC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAC3B,KCRO,yBDQuB6B,QAASO,OAC9DC,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAAC3B,KCRI,wBDQyB6B,QAASH,cDuCzDJ,CAA6CZ,GGzCtD4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,MAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBnB,OAAM,SAAAX,GACL6B,QAAQ7B,MAAM,4CAA6CA,M,iBC9D3D+B,EAAqB,CACvB5C,YAAa,IAYX6C,EAAqB,CACvB3C,WAAU,EACVvB,OAAO,GACPkC,MAAM,ICZJiC,EAASC,yBAETC,EAAcC,YAAgB,CAChCtC,aDHwB,WAAwC,IAAvCD,EAAsC,uDAAhCkC,EAAoBM,EAAY,uDAAL,GAC1D,OAAQA,EAAO/D,MACX,IFd4B,sBEexB,OAAO,eAAIuB,EAAX,CAAkBV,YAAakD,EAAOlC,UAC1C,QACI,OAAON,ICDfE,cDWyB,WAAwC,IAAvCF,EAAsC,uDAAhCmC,EAAoBK,EAAY,uDAAL,GAC3D,OAAQA,EAAO/D,MACX,IF3B+B,yBE4B3B,OAAO,eAAIuB,EAAX,CAAkBR,WAAU,IAChC,IF5B+B,yBE6B3B,OAAO,eAAIQ,EAAX,CAAkB/B,OAAOuE,EAAOlC,QAASd,WAAW,IACxD,IF7B8B,wBE8B1B,OAAO,eAAIQ,EAAX,CAAkBG,MAAQqC,EAAOlC,QAASd,WAAW,IACzD,QACI,OAAOQ,MCjBbyC,EAAQC,YAAYJ,EAAaK,YAAgBC,IAAgBR,IAEvES,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAAC,EAAD,OAAoBM,SAASC,eAAe,SFDrE,WACb,GAA6C,kBAAmBzB,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwBjC,OAAOC,UAC3CiC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM4B,GAAN,sBAEPnC,EAwCV,SAAiCO,GAE/Bb,MAAMa,GACHZ,MAAK,SAAAC,GAGkB,MAApBA,EAAS0C,SACuD,IAAhE1C,EAAS2C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjC,UAAUC,cAAciC,MAAM/C,MAAK,SAAAgB,GACjCA,EAAagC,aAAahD,MAAK,WAC7BO,OAAOC,SAASyC,eAKpBtC,EAAgBC,MAGnBR,OAAM,WACLkB,QAAQC,IACN,oEA5DA2B,CAAwBtC,GAGxBD,EAAgBC,OEjBxBuC,K","file":"static/js/main.034ed14d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {requestRobots, setSearchField} from \"../actions\";\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: ()=> dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange,robots,isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","export  const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport  const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport  const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport  const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending:true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots:action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error : action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from \"redux-logger\";\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport {searchRobots, requestRobots} from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({\r\n    searchRobots,\r\n    requestRobots\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}